// Code generated by apic. DO NOT EDIT.

package ngrok

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	restapi "github.com/ngrok/terraform-provider-ngrok/restapi"
)

func resourceIPPolicies() *schema.Resource {
	return &schema.Resource{
		Create: resourceIPPoliciesCreate,
		Read:   resourceIPPoliciesGet,
		Update: resourceIPPoliciesUpdate,
		Delete: resourceIPPoliciesDelete,

		Schema: map[string]*schema.Schema{
			"action": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "the IP policy action. Supported values are allow or deny",
			},
			"created_at": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    true,
				Description: "timestamp when the IP policy was created, RFC 3339 format",
			},
			"description": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "human-readable description of the source IPs of this IP policy. optional, max 255 bytes.",
			},
			"metadata": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "arbitrary user-defined machine-readable data of this IP policy. optional, max 4096 bytes.",
			},
			"ngrok_id": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				Description: "unique identifier for this IP policy",
			},
			"uri": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "URI of the IP Policy API resource",
			},
		},
	}
}

func resourceIPPoliciesCreate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.IPPolicyCreate
	if v, ok := d.GetOk("description"); ok {
		arg.Description = *expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = *expandString(v)
	}
	if v, ok := d.GetOk("action"); ok {
		arg.Action = *expandString(v)
	}

	res, _, err := b.client.IPPoliciesCreate(context.Background(), &arg)
	if err == nil {
		d.SetId(res.ID)
	}
	return resourceIPPoliciesGet(d, m)
}

func resourceIPPoliciesGet(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	res, resp, err := b.client.IPPoliciesGet(context.Background(), &restapi.Item{
		ID: d.Id(),
	})
	return resourceIPPoliciesGetDecode(d, res, resp, err)
}

func resourceIPPoliciesGetDecode(d *schema.ResourceData, res *restapi.IPPolicy, resp *http.Response, err error) error {
	switch {
	case resp != nil && resp.StatusCode == 404:
		d.SetId("")
	case err != nil:
		return err
	default:
		d.Set("action", res.Action)
		d.Set("created_at", res.CreatedAt)
		d.Set("description", res.Description)
		d.Set("metadata", res.Metadata)
		d.Set("ngrok_id", res.ID)
		d.Set("uri", res.URI)
	}

	return nil
}

func resourceIPPoliciesUpdate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.IPPolicyUpdate
	arg.ID = d.Id()
	if v, ok := d.GetOk("ngrok_id"); ok {
		arg.ID = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = expandString(v)
	}

	res, _, err := b.client.IPPoliciesUpdate(context.Background(), &arg)
	if err != nil {
		return err
	}
	d.SetId(res.ID)

	return resourceIPPoliciesGet(d, m)
}

func resourceIPPoliciesDelete(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)
	_, _, err = b.client.IPPoliciesDelete(context.Background(), &restapi.Item{ID: d.Id()})
	return err
}
