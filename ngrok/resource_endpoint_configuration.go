// Code generated by apic. DO NOT EDIT.

package ngrok

import (
	"context"
	"log"
	"net/http"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	restapi "github.com/ngrok/terraform-provider-ngrok/restapi"
	transform "github.com/ngrok/terraform-provider-ngrok/transform"
)

func resourceEndpointConfigurations() *schema.Resource {
	return &schema.Resource{
		Create:      resourceEndpointConfigurationsCreate,
		Read:        resourceEndpointConfigurationsGet,
		Update:      resourceEndpointConfigurationsUpdate,
		Delete:      resourceEndpointConfigurationsDelete,
		Description: "Endpoint Configurations are a reusable group of modules that encapsulate how\n traffic to a domain or address is handled. Endpoint configurations are only\n applied to Domains and TCP Addresses they have been attached to.",
		Schema: map[string]*schema.Schema{
			"backend": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "backend module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"backend": {
							Type:        schema.TypeSet,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "backend to be used to back this endpoint",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "a resource identifier",
									},
									"uri": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "a uri for locating a resource",
									},
								},
							},
						},
					},
				},
			},
			"basic_auth": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "basic auth module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"auth_provider_id": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "determines how the basic auth credentials are validated. Currently only the value `agent` is supported which means that credentials will be validated against the username and password specified by the ngrok agent's `-auth` flag, if any.",
						},
						"realm": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "an arbitrary string to be specified in as the 'realm' value in the `WWW-Authenticate` header. default is `ngrok`",
						},
						"allow_options": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "true or false indicating whether to allow OPTIONS requests through without authentication which is necessary for CORS. default is `false`",
						},
					},
				},
			},
			"circuit_breaker": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "circuit breaker module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"tripped_duration": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds after which the circuit is tripped to wait before re-evaluating upstream health",
						},
						"rolling_window": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds in the statistical rolling window that metrics are retained for.",
						},
						"num_buckets": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of buckets into which metrics are retained. Max 128.",
						},
						"volume_threshold": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of requests in a rolling window that will trip the circuit. Helpful if traffic volume is low.",
						},
						"error_threshold_percentage": {
							Type:        schema.TypeFloat,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Error threshold percentage should be between 0 - 1.0, not 0-100.0",
						},
					},
				},
			},
			"compression": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "compression module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "human-readable description of what this endpoint configuration will be do when applied or what traffic it will be applied to. Optional, max 255 bytes",
			},
			"id": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "unique identifier of this endpoint configuration",
			},
			"ip_policy": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "ip policy module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"ip_policies": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "a resource identifier",
									},
									"uri": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "a uri for locating a resource",
									},
								},
							},
						},
					},
				},
			},
			"logging": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "logging module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"event_streams": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "list of all EventStreams that will be used to configure and export this endpoint's logs",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "a resource identifier",
									},
									"uri": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "a uri for locating a resource",
									},
								},
							},
						},
					},
				},
			},
			"metadata": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "arbitrary user-defined machine-readable data of this endpoint configuration. Optional, max 4096 bytes.",
			},
			"mutual_tls": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "mutual TLS module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"certificate_authorities": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "PEM-encoded CA certificates that will be used to validate. Multiple CAs may be provided by concatenating them together.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "a resource identifier",
									},
									"uri": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "a uri for locating a resource",
									},
								},
							},
						},
					},
				},
			},
			"oauth": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "oauth module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"provider": {
							Type:        schema.TypeSet,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "an object which defines the identity provider to use for authentication and configuration for who may access the endpoint",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"github": {
										Type:        schema.TypeSet,
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "configuration for using github as the identity provider",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"client_id": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "the OAuth app client ID. retrieve it from the identity provider's dashboard where you created your own OAuth app. optional. if unspecified, ngrok will use its own managed oauth application which has additional restrictions. see the OAuth module docs for more details. if present, client_secret must be present as well.",
												},
												"client_secret": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   true,
													ForceNew:    false,
													Description: "the OAuth app client secret. retrieve if from the identity provider's dashboard where you created your own OAuth app. optional, see all of the caveats in the docs for `client_id`.",
												},
												"scopes": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of provider-specific OAuth scopes with the permissions your OAuth app would like to ask for. these may not be set if you are using the ngrok-managed oauth app (i.e. you must pass both `client_id` and `client_secret` to set scopes)",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_addresses": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email addresses of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_domains": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email domains of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"teams": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of github teams identifiers. users will be allowed access to the endpoint if they are a member of any of these teams. identifiers should be in the 'slug' format qualified with the org name, e.g. `org-name/team-name`",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"organizations": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of github org identifiers. users who are members of any of the listed organizations will be allowed access. identifiers should be the organization's 'slug'",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"facebook": {
										Type:        schema.TypeSet,
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "configuration for using facebook as the identity provider",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"client_id": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "the OAuth app client ID. retrieve it from the identity provider's dashboard where you created your own OAuth app. optional. if unspecified, ngrok will use its own managed oauth application which has additional restrictions. see the OAuth module docs for more details. if present, client_secret must be present as well.",
												},
												"client_secret": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   true,
													ForceNew:    false,
													Description: "the OAuth app client secret. retrieve if from the identity provider's dashboard where you created your own OAuth app. optional, see all of the caveats in the docs for `client_id`.",
												},
												"scopes": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of provider-specific OAuth scopes with the permissions your OAuth app would like to ask for. these may not be set if you are using the ngrok-managed oauth app (i.e. you must pass both `client_id` and `client_secret` to set scopes)",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_addresses": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email addresses of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_domains": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email domains of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"microsoft": {
										Type:        schema.TypeSet,
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "configuration for using microsoft as the identity provider",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"client_id": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "the OAuth app client ID. retrieve it from the identity provider's dashboard where you created your own OAuth app. optional. if unspecified, ngrok will use its own managed oauth application which has additional restrictions. see the OAuth module docs for more details. if present, client_secret must be present as well.",
												},
												"client_secret": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   true,
													ForceNew:    false,
													Description: "the OAuth app client secret. retrieve if from the identity provider's dashboard where you created your own OAuth app. optional, see all of the caveats in the docs for `client_id`.",
												},
												"scopes": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of provider-specific OAuth scopes with the permissions your OAuth app would like to ask for. these may not be set if you are using the ngrok-managed oauth app (i.e. you must pass both `client_id` and `client_secret` to set scopes)",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_addresses": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email addresses of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_domains": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email domains of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"google": {
										Type:        schema.TypeSet,
										Required:    false,
										Computed:    false,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    false,
										Description: "configuration for using google as the identity provider",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"client_id": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "the OAuth app client ID. retrieve it from the identity provider's dashboard where you created your own OAuth app. optional. if unspecified, ngrok will use its own managed oauth application which has additional restrictions. see the OAuth module docs for more details. if present, client_secret must be present as well.",
												},
												"client_secret": {
													Type:        schema.TypeString,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   true,
													ForceNew:    false,
													Description: "the OAuth app client secret. retrieve if from the identity provider's dashboard where you created your own OAuth app. optional, see all of the caveats in the docs for `client_id`.",
												},
												"scopes": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of provider-specific OAuth scopes with the permissions your OAuth app would like to ask for. these may not be set if you are using the ngrok-managed oauth app (i.e. you must pass both `client_id` and `client_secret` to set scopes)",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_addresses": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email addresses of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
												"email_domains": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    false,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    false,
													Description: "a list of email domains of users authenticated by identity provider who are allowed access to the endpoint",
													Elem:        &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
								},
							},
						},
						"options_passthrough": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Do not enforce authentication on HTTP OPTIONS requests. necessary if you are supporting CORS.",
						},
						"cookie_prefix": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     "ngrok.",
							Sensitive:   false,
							ForceNew:    false,
							Description: "the prefix of the session cookie that ngrok sets on the http client to cache authentication. default is 'ngrok.'",
						},
						"inactivity_timeout": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds of inactivity after which if the user has not accessed the endpoint, their session will time out and they will be forced to reauthenticate.",
						},
						"maximum_duration": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds of the maximum duration of an authenticated session. After this period is exceeded, a user must reauthenticate.",
						},
						"auth_check_interval": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds after which ngrok guarantees it will refresh user state from the identity provider and recheck whether the user is still authorized to access the endpoint. This is the preferred tunable to use to enforce a minimum amount of time after which a revoked user will no longer be able to access the resource.",
						},
					},
				},
			},
			"oidc": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "oidc module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"options_passthrough": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Do not enforce authentication on HTTP OPTIONS requests. necessary if you are supporting CORS.",
						},
						"cookie_prefix": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     "ngrok.",
							Sensitive:   false,
							ForceNew:    false,
							Description: "the prefix of the session cookie that ngrok sets on the http client to cache authentication. default is 'ngrok.'",
						},
						"inactivity_timeout": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds of inactivity after which if the user has not accessed the endpoint, their session will time out and they will be forced to reauthenticate.",
						},
						"maximum_duration": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds of the maximum duration of an authenticated session. After this period is exceeded, a user must reauthenticate.",
						},
						"issuer": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "URL of the OIDC \"OpenID provider\". This is the base URL used for discovery.",
						},
						"client_id": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "The OIDC app's client ID and OIDC audience.",
						},
						"client_secret": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   true,
							ForceNew:    false,
							Description: "The OIDC app's client secret.",
						},
						"scopes": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "The set of scopes to request from the OIDC identity provider.",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"request_headers": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "request headers module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"add": {
							Type:         schema.TypeMap,
							Required:     false,
							Computed:     false,
							Optional:     true,
							Sensitive:    false,
							ForceNew:     false,
							Description:  "a map of header key to header value that will be injected into the HTTP Request before being sent to the upstream application server",
							ValidateFunc: transform.ValidateLowercaseKeys,
							Elem:         &schema.Schema{Type: schema.TypeString},
						},
						"remove": {
							Type:             schema.TypeList,
							Required:         false,
							Computed:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							Description:      "a list of header names that will be removed from the HTTP Request before being sent to the upstream application server",
							DiffSuppressFunc: transform.DiffSuppressCase,
							Elem:             &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"response_headers": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "response headers module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"add": {
							Type:        schema.TypeMap,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "a map of header key to header value that will be injected into the HTTP Response returned to the HTTP client",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"remove": {
							Type:             schema.TypeList,
							Required:         false,
							Computed:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							Description:      "a list of header names that will be removed from the HTTP Response returned to the HTTP client",
							DiffSuppressFunc: transform.DiffSuppressCase,
							Elem:             &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"saml": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "saml module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"options_passthrough": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Do not enforce authentication on HTTP OPTIONS requests. necessary if you are supporting CORS.",
						},
						"cookie_prefix": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     "ngrok.",
							Sensitive:   false,
							ForceNew:    false,
							Description: "the prefix of the session cookie that ngrok sets on the http client to cache authentication. default is 'ngrok.'",
						},
						"inactivity_timeout": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds of inactivity after which if the user has not accessed the endpoint, their session will time out and they will be forced to reauthenticate.",
						},
						"maximum_duration": {
							Type:        schema.TypeInt,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "Integer number of seconds of the maximum duration of an authenticated session. After this period is exceeded, a user must reauthenticate.",
						},
						"idp_metadata_url": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "The IdP's metadata URL which returns the XML IdP EntityDescriptor. The IdP's metadata URL specifies how to connect to the IdP as well as its public key which is then used to validate the signature on incoming SAML assertions to the ACS endpoint.",
						},
						"idp_metadata": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "The full XML IdP EntityDescriptor. Your IdP may provide this to you as a a file to download or as a URL.",
						},
						"force_authn": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "If true, indicates that whenever we redirect a user to the IdP for authentication that the IdP must prompt the user for authentication credentials even if the user already has a valid session with the IdP.",
						},
						"allow_idp_initiated": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "If true, the IdP may initiate a login directly (e.g. the user does not need to visit the endpoint first and then be redirected). The IdP should set the `RelayState` parameter to the target URL of the resource they want the user to be redirected to after the SAML login assertion has been processed.",
						},
						"authorized_groups": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "If present, only users who are a member of one of the listed groups may access the target endpoint.",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"entity_id": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "The SP Entity's unique ID. This always takes the form of a URL. In ngrok's implementation, this URL is the same as the metadata URL. This will need to be specified to the IdP as configuration.",
						},
						"assertion_consumer_service_url": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "The public URL of the SP's Assertion Consumer Service. This is where the IdP will redirect to during an authentication flow. This will need to be specified to the IdP as configuration.",
						},
						"single_logout_url": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "The public URL of the SP's Single Logout Service. This is where the IdP will redirect to during a single logout flow. This will optionally need to be specified to the IdP as configuration.",
						},
						"request_signing_certificate_pem": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "PEM-encoded x.509 certificate of the key pair that is used to sign all SAML requests that the ngrok SP makes to the IdP. Many IdPs do not support request signing verification, but we highly recommend specifying this in the IdP's configuration if it is supported.",
						},
						"metadata_url": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "A public URL where the SP's metadata is hosted. If an IdP supports dynamic configuration, this is the URL it can use to retrieve the SP metadata.",
						},
					},
				},
			},
			"tls_termination": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "TLS termination module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"terminate_at": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`edge` if the ngrok edge should terminate TLS traffic, `upstream` if TLS traffic should be passed through to the upstream ngrok agent / application server for termination. if `upstream` is chosen, most other modules will be disallowed because they rely on the ngrok edge being able to access the underlying traffic.",
						},
						"min_version": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "The minimum TLS version used for termination and advertised to the client during the TLS handshake. if unspecified, ngrok will choose an industry-safe default. This value must be null if `terminate_at` is set to `upstream`.",
						},
					},
				},
			},
			"type": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "they type of traffic this endpoint configuration can be applied to. one of: `http`, `https`, `tcp`",
			},
			"webhook_validation": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "webhook validation module configuration or `null`",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Default:     true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "`true` if the module will be applied to traffic, `false` to disable. default `true` if unspecified",
						},
						"provider": {
							Type:             schema.TypeString,
							Required:         false,
							Computed:         false,
							Optional:         true,
							Sensitive:        false,
							ForceNew:         false,
							Description:      "a string indicating which webhook provider will be sending webhooks to this endpoint. Value must be one of the supported providers: `SLACK`, `SNS`, `STRIPE`, `GITHUB`, `TWILIO`, `SHOPIFY`, `GITLAB`, `INTERCOM`.",
							DiffSuppressFunc: transform.DiffSuppressCase,
						},
						"secret": {
							Type:        schema.TypeString,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   true,
							ForceNew:    false,
							Description: "a string secret used to validate requests from the given provider. All providers except AWS SNS require a secret",
						},
					},
				},
			},
		},
	}
}

func resourceEndpointConfigurationsCreate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.EndpointConfigurationCreate
	if v, ok := d.GetOk("type"); ok {
		arg.Type = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = *expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = *expandString(v)
	}
	if v, ok := d.GetOk("basic_auth"); ok {
		arg.BasicAuth = expandEndpointBasicAuth(v)
	}
	if v, ok := d.GetOk("circuit_breaker"); ok {
		arg.CircuitBreaker = expandEndpointCircuitBreaker(v)
	}
	if v, ok := d.GetOk("compression"); ok {
		arg.Compression = expandEndpointCompression(v)
	}
	if v, ok := d.GetOk("request_headers"); ok {
		arg.RequestHeaders = expandEndpointRequestHeaders(v)
	}
	if v, ok := d.GetOk("response_headers"); ok {
		arg.ResponseHeaders = expandEndpointResponseHeaders(v)
	}
	if v, ok := d.GetOk("ip_policy"); ok {
		arg.IPPolicy = expandEndpointIPPolicyMutate(v)
	}
	if v, ok := d.GetOk("mutual_tls"); ok {
		arg.MutualTLS = expandEndpointMutualTLSMutate(v)
	}
	if v, ok := d.GetOk("tls_termination"); ok {
		arg.TLSTermination = expandEndpointTLSTermination(v)
	}
	if v, ok := d.GetOk("webhook_validation"); ok {
		arg.WebhookValidation = expandEndpointWebhookValidation(v)
	}
	if v, ok := d.GetOk("oauth"); ok {
		arg.OAuth = expandEndpointOAuth(v)
	}
	if v, ok := d.GetOk("logging"); ok {
		arg.Logging = expandEndpointLoggingMutate(v)
	}
	if v, ok := d.GetOk("saml"); ok {
		arg.SAML = expandEndpointSAMLMutate(v)
	}
	if v, ok := d.GetOk("oidc"); ok {
		arg.OIDC = expandEndpointOIDC(v)
	}
	if v, ok := d.GetOk("backend"); ok {
		arg.Backend = expandEndpointBackendMutate(v)
	}

	res, _, err := b.client.EndpointConfigurationsCreate(context.Background(), &arg)
	if err != nil {
		log.Printf("[ERROR] EndpointConfigurationsCreate: %s", err)
		return err
	}
	d.SetId(res.ID)

	return resourceEndpointConfigurationsGet(d, m)
}

func resourceEndpointConfigurationsGet(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	res, resp, err := b.client.EndpointConfigurationsGet(context.Background(), &restapi.Item{
		ID: d.Id(),
	})
	return resourceEndpointConfigurationsGetDecode(d, res, resp, err)
}

func resourceEndpointConfigurationsGetDecode(d *schema.ResourceData, res *restapi.EndpointConfiguration, resp *http.Response, err error) error {
	switch {
	case resp != nil && resp.StatusCode == 404:
		d.SetId("")
	case err != nil:
		log.Printf("[ERROR] EndpointConfigurationsGet: %s", err)
		return err
	default:
		d.Set("backend", flattenEndpointBackend(res.Backend))
		d.Set("basic_auth", flattenEndpointBasicAuth(res.BasicAuth))
		d.Set("circuit_breaker", flattenEndpointCircuitBreaker(res.CircuitBreaker))
		d.Set("compression", flattenEndpointCompression(res.Compression))
		d.Set("description", res.Description)
		d.Set("id", res.ID)
		d.Set("ip_policy", flattenEndpointIPPolicy(res.IPPolicy))
		d.Set("logging", flattenEndpointLogging(res.Logging))
		d.Set("metadata", res.Metadata)
		d.Set("mutual_tls", flattenEndpointMutualTLS(res.MutualTLS))
		d.Set("oauth", flattenEndpointOAuth(res.OAuth))
		d.Set("oidc", flattenEndpointOIDC(res.OIDC))
		d.Set("request_headers", flattenEndpointRequestHeaders(res.RequestHeaders))
		d.Set("response_headers", flattenEndpointResponseHeaders(res.ResponseHeaders))
		d.Set("saml", flattenEndpointSAML(res.SAML))
		d.Set("tls_termination", flattenEndpointTLSTermination(res.TLSTermination))
		d.Set("type", res.Type)
		d.Set("webhook_validation", flattenEndpointWebhookValidation(res.WebhookValidation))
	}
	return nil
}

func resourceEndpointConfigurationsUpdate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.EndpointConfigurationUpdate
	arg.ID = d.Id()
	if v, ok := d.GetOk("id"); ok {
		arg.ID = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = expandString(v)
	}
	if v, ok := d.GetOk("basic_auth"); ok {
		arg.BasicAuth = expandEndpointBasicAuth(v)
	}
	if v, ok := d.GetOk("circuit_breaker"); ok {
		arg.CircuitBreaker = expandEndpointCircuitBreaker(v)
	}
	if v, ok := d.GetOk("compression"); ok {
		arg.Compression = expandEndpointCompression(v)
	}
	if v, ok := d.GetOk("request_headers"); ok {
		arg.RequestHeaders = expandEndpointRequestHeaders(v)
	}
	if v, ok := d.GetOk("response_headers"); ok {
		arg.ResponseHeaders = expandEndpointResponseHeaders(v)
	}
	if v, ok := d.GetOk("ip_policy"); ok {
		arg.IPPolicy = expandEndpointIPPolicyMutate(v)
	}
	if v, ok := d.GetOk("mutual_tls"); ok {
		arg.MutualTLS = expandEndpointMutualTLSMutate(v)
	}
	if v, ok := d.GetOk("tls_termination"); ok {
		arg.TLSTermination = expandEndpointTLSTermination(v)
	}
	if v, ok := d.GetOk("webhook_validation"); ok {
		arg.WebhookValidation = expandEndpointWebhookValidation(v)
	}
	if v, ok := d.GetOk("oauth"); ok {
		arg.OAuth = expandEndpointOAuth(v)
	}
	if v, ok := d.GetOk("logging"); ok {
		arg.Logging = expandEndpointLoggingMutate(v)
	}
	if v, ok := d.GetOk("saml"); ok {
		arg.SAML = expandEndpointSAMLMutate(v)
	}
	if v, ok := d.GetOk("oidc"); ok {
		arg.OIDC = expandEndpointOIDC(v)
	}
	if v, ok := d.GetOk("backend"); ok {
		arg.Backend = expandEndpointBackendMutate(v)
	}

	res, _, err := b.client.EndpointConfigurationsUpdate(context.Background(), &arg)
	if err != nil {
		log.Printf("[ERROR] EndpointConfigurationsUpdate: %s", err)
		return err
	}
	d.SetId(res.ID)

	return resourceEndpointConfigurationsGet(d, m)
}

func resourceEndpointConfigurationsDelete(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)
	_, _, err = b.client.EndpointConfigurationsDelete(context.Background(), &restapi.Item{ID: d.Id()})
	if err != nil {
		log.Printf("[ERROR] EndpointConfigurationsDelete: %s", err)
	}
	return err
}
