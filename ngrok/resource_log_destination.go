// Code generated by apic. DO NOT EDIT.

package ngrok

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	restapi "github.com/ngrok/terraform-provider-ngrok/restapi"
)

func resourceLogDestinations() *schema.Resource {
	return &schema.Resource{
		Create: resourceLogDestinationsCreate,
		Read:   resourceLogDestinationsGet,
		Update: resourceLogDestinationsUpdate,
		Delete: resourceLogDestinationsDelete,

		Schema: map[string]*schema.Schema{
			"created_at": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    true,
				Description: "Timestamp when the Log Destination was created, RFC 3339 format.",
			},
			"description": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "Human-readable description of the Log Destination. Optional, max 255 bytes.",
			},
			"format": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "The output format you would like to serialize your logs into before they post to their target. Currently the only accepted value is JSON.",
			},
			"metadata": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "Arbitrary user-defined machine-readable data of this Log Destination. Optional, max 4096 bytes.",
			},
			"ngrok_id": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				Description: "Unique identifier for this Log Destination.",
			},
			"target": {
				Type:        schema.TypeList,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "An object that encapsulates where and how to send your logs to their ultimate destination. A log destination must contain exactly one of the following objects, leaving the rest null: kinesis, firehose, cloudwatch, or S3.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"firehose": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "Configuration used to stream logs to Amazon Kinesis Data Firehose.",
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"auth": {
										Type:        schema.TypeList,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "Configuration authentication into your AWS account. Exactly one of role or creds should be configured.",
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"role": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    true,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    true,
													Description: "A role for ngrok to assume on your behalf to deposit logs into your AWS account.",
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"arn": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "An arn that describes a role that ngrok can assume and use to post to the configured target.",
															},
														},
													},
												},
												"creds": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    true,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    true,
													Description: "Credentials to your AWS account if you prefer ngrok to sign in with long-term access keys.",
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"aws_access_key_id": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "The ID portion of an AWS access key.",
															},
															"aws_secret_access_key": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "The secret portion of an AWS access key.",
															},
														},
													},
												},
											},
										},
									},
									"delivery_stream_arn": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "An Amazon Resource Name specifying the Firehose delivery stream to deposit logs into.",
									},
								},
							},
						},
						"kinesis": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "Configuration used to stream logs to Amazon Kinesis.",
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"auth": {
										Type:        schema.TypeList,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "Configuration authentication into your AWS account. Exactly one of role or creds should be configured.",
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"role": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    true,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    true,
													Description: "A role for ngrok to assume on your behalf to deposit logs into your AWS account.",
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"arn": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "An arn that describes a role that ngrok can assume and use to post to the configured target.",
															},
														},
													},
												},
												"creds": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    true,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    true,
													Description: "Credentials to your AWS account if you prefer ngrok to sign in with long-term access keys.",
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"aws_access_key_id": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "The ID portion of an AWS access key.",
															},
															"aws_secret_access_key": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "The secret portion of an AWS access key.",
															},
														},
													},
												},
											},
										},
									},
									"stream_arn": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "An Amazon Resource Name specifying the Kinesis stream to deposit logs into.",
									},
								},
							},
						},
						"cloudwatch": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "Configuration used to send logs to Amazon CloudWatch Logs.",
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"auth": {
										Type:        schema.TypeList,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "Configuration authentication into your AWS account. Exactly one of role or creds should be configured.",
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"role": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    true,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    true,
													Description: "A role for ngrok to assume on your behalf to deposit logs into your AWS account.",
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"arn": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "An arn that describes a role that ngrok can assume and use to post to the configured target.",
															},
														},
													},
												},
												"creds": {
													Type:        schema.TypeList,
													Required:    false,
													Computed:    true,
													Optional:    true,
													Sensitive:   false,
													ForceNew:    true,
													Description: "Credentials to your AWS account if you prefer ngrok to sign in with long-term access keys.",
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"aws_access_key_id": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "The ID portion of an AWS access key.",
															},
															"aws_secret_access_key": {
																Type:        schema.TypeString,
																Required:    false,
																Computed:    true,
																Optional:    true,
																Sensitive:   false,
																ForceNew:    true,
																Description: "The secret portion of an AWS access key.",
															},
														},
													},
												},
											},
										},
									},
									"log_group_arn": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "An Amazon Resource Name specifying the CloudWatch Logs group to deposit logs with.",
									},
								},
							},
						},
						"debug": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "Configuration used for internal debugging.",
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"log": {
										Type:        schema.TypeBool,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "Whether or not to output to publisher service logs.",
									},
									"callback_url": {
										Type:        schema.TypeString,
										Required:    false,
										Computed:    true,
										Optional:    true,
										Sensitive:   false,
										ForceNew:    true,
										Description: "Url to send events to.",
									},
								},
							},
						},
					},
				},
			},
			"uri": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "URI of the Log Destination API resource.",
			},
		},
	}
}

func resourceLogDestinationsCreate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.LogDestinationCreate
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = *expandString(v)
	}
	if v, ok := d.GetOk("format"); ok {
		arg.Format = *expandString(v)
	}
	if v, ok := d.GetOk("target"); ok {
		arg.Target = *expandLogDestinationTarget(v)
	}

	res, _, err := b.client.LogDestinationsCreate(context.Background(), &arg)
	if err == nil {
		d.SetId(res.ID)
	}
	return resourceLogDestinationsGet(d, m)
}

func resourceLogDestinationsGet(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	res, resp, err := b.client.LogDestinationsGet(context.Background(), &restapi.Item{
		ID: d.Id(),
	})
	return resourceLogDestinationsGetDecode(d, res, resp, err)
}

func resourceLogDestinationsGetDecode(d *schema.ResourceData, res *restapi.LogDestination, resp *http.Response, err error) error {
	switch {
	case resp != nil && resp.StatusCode == 404:
		d.SetId("")
	case err != nil:
		return err
	default:
		d.Set("created_at", res.CreatedAt)
		d.Set("description", res.Description)
		d.Set("format", res.Format)
		d.Set("metadata", res.Metadata)
		d.Set("ngrok_id", res.ID)
		d.Set("target", flattenLogDestinationTarget(&res.Target))
		d.Set("uri", res.URI)
	}

	return nil
}

func resourceLogDestinationsUpdate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.LogDestinationUpdate
	arg.ID = d.Id()
	if v, ok := d.GetOk("ngrok_id"); ok {
		arg.ID = *expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = expandString(v)
	}
	if v, ok := d.GetOk("format"); ok {
		arg.Format = expandString(v)
	}
	if v, ok := d.GetOk("target"); ok {
		arg.Target = expandLogDestinationTarget(v)
	}

	res, _, err := b.client.LogDestinationsUpdate(context.Background(), &arg)
	if err != nil {
		return err
	}
	d.SetId(res.ID)

	return resourceLogDestinationsGet(d, m)
}

func resourceLogDestinationsDelete(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)
	_, _, err = b.client.LogDestinationsDelete(context.Background(), &restapi.Item{ID: d.Id()})
	return err
}
