// Code generated by apic. DO NOT EDIT.

package ngrok

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	restapi "github.com/ngrok/terraform-provider-ngrok/restapi"
)

func resourceStaticBackends() *schema.Resource {
	return &schema.Resource{
		Create: resourceStaticBackendsCreate,
		Read:   resourceStaticBackendsGet,
		Update: resourceStaticBackendsUpdate,
		Delete: resourceStaticBackendsDelete,

		Schema: map[string]*schema.Schema{
			"address": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "the address to forward to",
			},
			"created_at": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "timestamp when the backend was created, RFC 3339 format",
			},
			"description": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "human-readable description of this backend. Optional",
			},
			"metadata": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "arbitrary user-defined machine-readable data of this backend. Optional",
			},
			"ngrok_id": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				Description: "unique identifier for this static backend",
			},
			"tls": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "tls configuration to use",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Required:    false,
							Computed:    false,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    false,
							Description: "if tls is checked",
						},
					},
				},
			},
		},
	}
}

func resourceStaticBackendsCreate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.StaticBackendCreate
	if v, ok := d.GetOk("description"); ok {
		arg.Description = *expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = *expandString(v)
	}
	if v, ok := d.GetOk("address"); ok {
		arg.Address = *expandString(v)
	}
	if v, ok := d.GetOk("tls"); ok {
		arg.TLS = *expandStaticBackendTLS(v)
	}

	res, _, err := b.client.StaticBackendsCreate(context.Background(), &arg)
	if err == nil {
		d.SetId(res.ID)
	}
	return resourceStaticBackendsGet(d, m)
}

func resourceStaticBackendsGet(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	res, resp, err := b.client.StaticBackendsGet(context.Background(), &restapi.Item{
		ID: d.Id(),
	})
	return resourceStaticBackendsGetDecode(d, res, resp, err)
}

func resourceStaticBackendsGetDecode(d *schema.ResourceData, res *restapi.StaticBackend, resp *http.Response, err error) error {
	switch {
	case resp != nil && resp.StatusCode == 404:
		d.SetId("")
	case err != nil:
		return err
	default:
		d.Set("address", res.Address)
		d.Set("created_at", res.CreatedAt)
		d.Set("description", res.Description)
		d.Set("metadata", res.Metadata)
		d.Set("ngrok_id", res.ID)
		d.Set("tls", flattenStaticBackendTLS(&res.TLS))
	}
	return nil
}

func resourceStaticBackendsUpdate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.StaticBackendUpdate
	arg.ID = d.Id()
	if v, ok := d.GetOk("ngrok_id"); ok {
		arg.ID = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = expandString(v)
	}
	if v, ok := d.GetOk("address"); ok {
		arg.Address = *expandString(v)
	}
	if v, ok := d.GetOk("tls"); ok {
		arg.TLS = *expandStaticBackendTLS(v)
	}

	res, _, err := b.client.StaticBackendsUpdate(context.Background(), &arg)
	if err != nil {
		return err
	}
	d.SetId(res.ID)

	return resourceStaticBackendsGet(d, m)
}

func resourceStaticBackendsDelete(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)
	_, _, err = b.client.StaticBackendsDelete(context.Background(), &restapi.Item{ID: d.Id()})
	return err
}
