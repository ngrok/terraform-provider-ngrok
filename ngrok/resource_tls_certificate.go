// Code generated by apic. DO NOT EDIT.

package ngrok

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	restapi "github.com/ngrok/terraform-provider-ngrok/restapi"
	transform "github.com/ngrok/terraform-provider-ngrok/transform"
)

func resourceTLSCertificates() *schema.Resource {
	return &schema.Resource{
		Create: resourceTLSCertificatesCreate,
		Read:   resourceTLSCertificatesGet,
		Update: resourceTLSCertificatesUpdate,
		Delete: resourceTLSCertificatesDelete,

		Schema: map[string]*schema.Schema{
			"certificate_pem": {
				Type:             schema.TypeString,
				Required:         false,
				Computed:         false,
				Optional:         true,
				Sensitive:        false,
				ForceNew:         true,
				Description:      "chain of PEM-encoded certificates, leaf first. See Certificate Bundles.",
				DiffSuppressFunc: transform.DiffSuppressWhitespace,
			},
			"created_at": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "timestamp when the TLS certificate was created, RFC 3339 format",
			},
			"description": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "human-readable description of this TLS certificate. optional, max 255 bytes.",
			},
			"extended_key_usages": {
				Type:        schema.TypeList,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "extended set of actions the private key of this TLS certificate can be used for",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"issued_at": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "timestamp (in RFC 3339 format) when this TLS certificate was issued automatically, or null if this certificate was user-uploaded",
			},
			"issuer_common_name": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "issuer common name from the leaf of this TLS certificate",
			},
			"key_usages": {
				Type:        schema.TypeList,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "set of actions the private key of this TLS certificate can be used for",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"metadata": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.",
			},
			"ngrok_id": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "unique identifier for this TLS certificate",
			},
			"not_after": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "timestamp when this TLS certificate becomes invalid, RFC 3339 format",
			},
			"not_before": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "timestamp when this TLS certificate becomes valid, RFC 3339 format",
			},
			"private_key_pem": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "private key for the TLS certificate, PEM-encoded. See Private Keys.",
			},
			"private_key_type": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "type of the private key of this TLS certificate. One of rsa, ecdsa, or ed25519.",
			},
			"serial_number": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "serial number of the leaf of this TLS certificate",
			},
			"subject_alternative_names": {
				Type:        schema.TypeSet,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject alternative names (SANs) from the leaf of this TLS certificate",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dns_names": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "set of additional domains (including wildcards) this TLS certificate is valid for",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"ips": {
							Type:        schema.TypeList,
							Required:    false,
							Computed:    true,
							Optional:    true,
							Sensitive:   false,
							ForceNew:    true,
							Description: "set of IP addresses this TLS certificate is also valid for",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"subject_common_name": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject common name from the leaf of this TLS certificate",
			},
			"subject_country": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject country from the leaf of this TLS certificate",
			},
			"subject_locality": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject locality from the leaf of this TLS certificate",
			},
			"subject_organization": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject organization from the leaf of this TLS certificate",
			},
			"subject_organizational_unit": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject organizational unit from the leaf of this TLS certificate",
			},
			"subject_province": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "subject province from the leaf of this TLS certificate",
			},
			"uri": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "URI of the TLS certificate API resource",
			},
		},
	}
}

func resourceTLSCertificatesCreate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.TLSCertificateCreate
	if v, ok := d.GetOk("description"); ok {
		arg.Description = *expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = *expandString(v)
	}
	if v, ok := d.GetOk("certificate_pem"); ok {
		arg.CertificatePEM = *expandString(v)
	}
	if v, ok := d.GetOk("private_key_pem"); ok {
		arg.PrivateKeyPEM = *expandString(v)
	}

	res, _, err := b.client.TLSCertificatesCreate(context.Background(), &arg)
	if err == nil {
		d.SetId(res.ID)
	}
	return resourceTLSCertificatesGet(d, m)
}

func resourceTLSCertificatesGet(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	res, resp, err := b.client.TLSCertificatesGet(context.Background(), &restapi.Item{
		ID: d.Id(),
	})
	return resourceTLSCertificatesGetDecode(d, res, resp, err)
}

func resourceTLSCertificatesGetDecode(d *schema.ResourceData, res *restapi.TLSCertificate, resp *http.Response, err error) error {
	switch {
	case resp != nil && resp.StatusCode == 404:
		d.SetId("")
	case err != nil:
		return err
	default:
		d.Set("certificate_pem", res.CertificatePEM)
		d.Set("created_at", res.CreatedAt)
		d.Set("description", res.Description)
		d.Set("extended_key_usages", res.ExtendedKeyUsages)
		d.Set("issued_at", res.IssuedAt)
		d.Set("issuer_common_name", res.IssuerCommonName)
		d.Set("key_usages", res.KeyUsages)
		d.Set("metadata", res.Metadata)
		d.Set("ngrok_id", res.ID)
		d.Set("not_after", res.NotAfter)
		d.Set("not_before", res.NotBefore)
		d.Set("private_key_type", res.PrivateKeyType)
		d.Set("serial_number", res.SerialNumber)
		d.Set("subject_alternative_names", flattenTLSCertificateSANs(&res.SubjectAlternativeNames))
		d.Set("subject_common_name", res.SubjectCommonName)
		d.Set("subject_country", res.SubjectCountry)
		d.Set("subject_locality", res.SubjectLocality)
		d.Set("subject_organization", res.SubjectOrganization)
		d.Set("subject_organizational_unit", res.SubjectOrganizationalUnit)
		d.Set("subject_province", res.SubjectProvince)
		d.Set("uri", res.URI)
	}
	return nil
}

func resourceTLSCertificatesUpdate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.TLSCertificateUpdate
	arg.ID = d.Id()
	if v, ok := d.GetOk("ngrok_id"); ok {
		arg.ID = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = expandString(v)
	}

	res, _, err := b.client.TLSCertificatesUpdate(context.Background(), &arg)
	if err != nil {
		return err
	}
	d.SetId(res.ID)

	return resourceTLSCertificatesGet(d, m)
}

func resourceTLSCertificatesDelete(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)
	_, _, err = b.client.TLSCertificatesDelete(context.Background(), &restapi.Item{ID: d.Id()})
	return err
}
