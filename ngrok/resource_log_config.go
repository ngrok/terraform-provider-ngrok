// Code generated by apic. DO NOT EDIT.

package ngrok

import (
	"context"
	"net/http"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	restapi "github.com/ngrok/terraform-provider-ngrok/restapi"
)

func resourceLogConfigs() *schema.Resource {
	return &schema.Resource{
		Create: resourceLogConfigsCreate,
		Read:   resourceLogConfigsGet,
		Update: resourceLogConfigsUpdate,
		Delete: resourceLogConfigsDelete,

		Schema: map[string]*schema.Schema{
			"created_at": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    true,
				Description: "Timestamp when the Log Config was created, RFC 3339 format.",
			},
			"description": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "Human-readable description of the Log Config. Optional, max 255 bytes.",
			},
			"destination_ids": {
				Type:        schema.TypeList,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "A list of Log Destination ids which should be applied to this Log Config. Log Configs are required to have at least one Log Destination.",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"event_type": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "The protocol that determines which events can be logged. Supported values are tcp_connection_closed and http_request_complete.",
			},
			"fields": {
				Type:        schema.TypeList,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "A list of protocol-specific fields you want to collect on each logging event.",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"metadata": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "Arbitrary user-defined machine-readable data of this Log Config. Optional, max 4096 bytes.",
			},
			"ngrok_id": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    false,
				Sensitive:   false,
				ForceNew:    false,
				Description: "Unique identifier for this Log Config.",
			},
			"sampling_rate": {
				Type:        schema.TypeFloat,
				Required:    false,
				Computed:    false,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    false,
				Description: "The percentage of all events you would like to log. Valid values range from 0.01, representing 1% of all events to 1.00, representing 100% of all events.",
			},
			"uri": {
				Type:        schema.TypeString,
				Required:    false,
				Computed:    true,
				Optional:    true,
				Sensitive:   false,
				ForceNew:    true,
				Description: "URI of the Log Config API resource.",
			},
		},
	}
}

func resourceLogConfigsCreate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.LogConfigCreate
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = *expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = *expandString(v)
	}
	if v, ok := d.GetOk("fields"); ok {
		arg.Fields = *expandStringSlice(v)
	}
	if v, ok := d.GetOk("event_type"); ok {
		arg.EventType = *expandString(v)
	}
	if v, ok := d.GetOk("destination_ids"); ok {
		arg.DestinationIDs = *expandStringSlice(v)
	}
	if v, ok := d.GetOk("sampling_rate"); ok {
		arg.SamplingRate = *expandFloat64(v)
	}

	res, _, err := b.client.LogConfigsCreate(context.Background(), &arg)
	if err == nil {
		d.SetId(res.ID)
	}
	return resourceLogConfigsGet(d, m)
}

func resourceLogConfigsGet(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	res, resp, err := b.client.LogConfigsGet(context.Background(), &restapi.Item{
		ID: d.Id(),
	})
	return resourceLogConfigsGetDecode(d, res, resp, err)
}

func resourceLogConfigsGetDecode(d *schema.ResourceData, res *restapi.LogConfig, resp *http.Response, err error) error {
	switch {
	case resp != nil && resp.StatusCode == 404:
		d.SetId("")
	case err != nil:
		return err
	default:
		d.Set("created_at", res.CreatedAt)
		d.Set("description", res.Description)
		d.Set("destination_ids", res.DestinationIDs)
		d.Set("event_type", res.EventType)
		d.Set("fields", res.Fields)
		d.Set("metadata", res.Metadata)
		d.Set("ngrok_id", res.ID)
		d.Set("sampling_rate", res.SamplingRate)
		d.Set("uri", res.URI)
	}

	return nil
}

func resourceLogConfigsUpdate(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)

	var arg restapi.LogConfigUpdate
	arg.ID = d.Id()
	if v, ok := d.GetOk("ngrok_id"); ok {
		arg.ID = *expandString(v)
	}
	if v, ok := d.GetOk("metadata"); ok {
		arg.Metadata = expandString(v)
	}
	if v, ok := d.GetOk("description"); ok {
		arg.Description = expandString(v)
	}
	if v, ok := d.GetOk("fields"); ok {
		arg.Fields = expandStringSlice(v)
	}
	if v, ok := d.GetOk("destination_ids"); ok {
		arg.DestinationIDs = expandStringSlice(v)
	}
	if v, ok := d.GetOk("sampling_rate"); ok {
		arg.SamplingRate = expandFloat64(v)
	}

	res, _, err := b.client.LogConfigsUpdate(context.Background(), &arg)
	if err != nil {
		return err
	}
	d.SetId(res.ID)

	return resourceLogConfigsGet(d, m)
}

func resourceLogConfigsDelete(d *schema.ResourceData, m interface{}) (err error) {
	b := m.(*base)
	_, _, err = b.client.LogConfigsDelete(context.Background(), &restapi.Item{ID: d.Id()})
	return err
}
