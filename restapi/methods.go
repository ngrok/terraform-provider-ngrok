// Code generated by apic. DO NOT EDIT.

package restapi

import (
	"bytes"
	"context"
	"errors"
	"io"
	"net/http"
	"text/template"
)

// Creates a new abuse report which will be reviewed by our system and abuse response team. This API is only available to authorized accounts. Contact abuse@ngrok.com to request access
func (c *Client) AbuseReportsCreate(ctx context.Context, arg *AbuseReportCreate) (*AbuseReport, *http.Response, error) {
	var res AbuseReport
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/abuse_reports")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get the detailed status of abuse report by ID.
func (c *Client) AbuseReportsGet(ctx context.Context, arg *Item) (*AbuseReport, *http.Response, error) {
	var res AbuseReport
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/abuse_reports/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new API key. The generated API key can be used to authenticateto the ngrok API.
func (c *Client) APIKeysCreate(ctx context.Context, arg *APIKeyCreate) (*APIKey, *http.Response, error) {
	var res APIKey
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/api_keys")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an API key by ID
func (c *Client) APIKeysDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/api_keys/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get the details of an API key by ID.
func (c *Client) APIKeysGet(ctx context.Context, arg *Item) (*APIKey, *http.Response, error) {
	var res APIKey
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/api_keys/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all API keys owned by this account
func (c *Client) APIKeysList(ctx context.Context, arg *Page) (*APIKeyList, *http.Response, error) {
	var res APIKeyList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/api_keys")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an API key by ID.
func (c *Client) APIKeysUpdate(ctx context.Context, arg *APIKeyUpdate) (*APIKey, *http.Response, error) {
	var res APIKey
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/api_keys/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new static backend
func (c *Client) StaticBackendsCreate(ctx context.Context, arg *StaticBackendCreate) (*StaticBackend, *http.Response, error) {
	var res StaticBackend
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/backends/static")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete a static backend by ID. TODO what if used?
func (c *Client) StaticBackendsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/backends/static/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about a static backend by ID
func (c *Client) StaticBackendsGet(ctx context.Context, arg *Item) (*StaticBackend, *http.Response, error) {
	var res StaticBackend
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/backends/static/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all static backends on this account
func (c *Client) StaticBackendsList(ctx context.Context, arg *Page) (*StaticBackendList, *http.Response, error) {
	var res StaticBackendList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/backends/static")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update static backend by ID
func (c *Client) StaticBackendsUpdate(ctx context.Context, arg *StaticBackendUpdate) (*StaticBackend, *http.Response, error) {
	var res StaticBackend
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/backends/static/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Upload a new Certificate Authority
func (c *Client) CertificateAuthoritiesCreate(ctx context.Context, arg *CertificateAuthorityCreate) (*CertificateAuthority, *http.Response, error) {
	var res CertificateAuthority
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/certificate_authorities")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete a Certificate Authority
func (c *Client) CertificateAuthoritiesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/certificate_authorities/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about a certficate authority
func (c *Client) CertificateAuthoritiesGet(ctx context.Context, arg *Item) (*CertificateAuthority, *http.Response, error) {
	var res CertificateAuthority
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/certificate_authorities/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all Certificate Authority on this account
func (c *Client) CertificateAuthoritiesList(ctx context.Context, arg *Page) (*CertificateAuthorityList, *http.Response, error) {
	var res CertificateAuthorityList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/certificate_authorities")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of a Certificate Authority by ID
func (c *Client) CertificateAuthoritiesUpdate(ctx context.Context, arg *CertificateAuthorityUpdate) (*CertificateAuthority, *http.Response, error) {
	var res CertificateAuthority
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/certificate_authorities/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new tunnel authtoken credential. This authtoken credential can be used to start a new tunnel session. The response to this API call is the only time the generated token is available. If you need it for future use, you must save it securely yourself.
func (c *Client) CredentialsCreate(ctx context.Context, arg *CredentialCreate) (*Credential, *http.Response, error) {
	var res Credential
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/credentials")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete a tunnel authtoken credential by ID
func (c *Client) CredentialsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/credentials/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about a tunnel authtoken credential
func (c *Client) CredentialsGet(ctx context.Context, arg *Item) (*Credential, *http.Response, error) {
	var res Credential
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/credentials/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all tunnel authtoken credentials on this account
func (c *Client) CredentialsList(ctx context.Context, arg *Page) (*CredentialList, *http.Response, error) {
	var res CredentialList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/credentials")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an tunnel authtoken credential by ID
func (c *Client) CredentialsUpdate(ctx context.Context, arg *CredentialUpdate) (*Credential, *http.Response, error) {
	var res Credential
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/credentials/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new Event Stream. It will not apply to anything until you associate it with one or more Endpoint Configs.
func (c *Client) EventStreamsCreate(ctx context.Context, arg *EventStreamCreate) (*EventStream, *http.Response, error) {
	var res EventStream
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_streams")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an Event Stream. Associated Event Destinations will be preserved.
func (c *Client) EventStreamsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_streams/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an Event Stream by ID.
func (c *Client) EventStreamsGet(ctx context.Context, arg *Item) (*EventStream, *http.Response, error) {
	var res EventStream
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_streams/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all Event Streams available on this account.
func (c *Client) EventStreamsList(ctx context.Context, arg *Page) (*EventStreamList, *http.Response, error) {
	var res EventStreamList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_streams")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an Event Stream by ID.
func (c *Client) EventStreamsUpdate(ctx context.Context, arg *EventStreamUpdate) (*EventStream, *http.Response, error) {
	var res EventStream
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_streams/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new Event Destination. It will not apply to anything until it is associated with an Event Stream, and that Event Stream is associated with an Endpoint Config.
func (c *Client) EventDestinationsCreate(ctx context.Context, arg *EventDestinationCreate) (*EventDestination, *http.Response, error) {
	var res EventDestination
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_destinations")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an Event Destination. If the Event Destination is still referenced by an Event Stream, this will throw an error until that Event Stream has removed that reference.
func (c *Client) EventDestinationsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_destinations/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an Event Destination by ID.
func (c *Client) EventDestinationsGet(ctx context.Context, arg *Item) (*EventDestination, *http.Response, error) {
	var res EventDestination
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_destinations/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all Event Destinations on this account.
func (c *Client) EventDestinationsList(ctx context.Context, arg *Page) (*EventDestinationList, *http.Response, error) {
	var res EventDestinationList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_destinations")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an Event Destination.
func (c *Client) EventDestinationsUpdate(ctx context.Context, arg *EventDestinationUpdate) (*EventDestination, *http.Response, error) {
	var res EventDestination
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_destinations/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Send a test event to an Event Destination
func (c *Client) EventDestinationsSendTestEvent(ctx context.Context, arg *Item) (*SentEvent, *http.Response, error) {
	var res SentEvent
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/event_destinations/{{ .ID }}/send_test_event")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new IP policy. It will not apply to any traffic until you associate to a traffic source via an endpoint configuration or IP restriction.
func (c *Client) IPPoliciesCreate(ctx context.Context, arg *IPPolicyCreate) (*IPPolicy, *http.Response, error) {
	var res IPPolicy
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policies")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an IP policy. If the IP policy is referenced by another object for the purposes of traffic restriction it will be treated as if the IP policy remains but has zero rules.
func (c *Client) IPPoliciesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policies/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an IP policy by ID.
func (c *Client) IPPoliciesGet(ctx context.Context, arg *Item) (*IPPolicy, *http.Response, error) {
	var res IPPolicy
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policies/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all IP policies on this account
func (c *Client) IPPoliciesList(ctx context.Context, arg *Page) (*IPPolicyList, *http.Response, error) {
	var res IPPolicyList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policies")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an IP policy by ID
func (c *Client) IPPoliciesUpdate(ctx context.Context, arg *IPPolicyUpdate) (*IPPolicy, *http.Response, error) {
	var res IPPolicy
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policies/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new IP policy rule attached to an IP Policy.
func (c *Client) IPPolicyRulesCreate(ctx context.Context, arg *IPPolicyRuleCreate) (*IPPolicyRule, *http.Response, error) {
	var res IPPolicyRule
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policy_rules")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an IP policy rule.
func (c *Client) IPPolicyRulesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policy_rules/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an IP policy rule by ID.
func (c *Client) IPPolicyRulesGet(ctx context.Context, arg *Item) (*IPPolicyRule, *http.Response, error) {
	var res IPPolicyRule
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policy_rules/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all IP policy rules on this account
func (c *Client) IPPolicyRulesList(ctx context.Context, arg *Page) (*IPPolicyRuleList, *http.Response, error) {
	var res IPPolicyRuleList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policy_rules")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an IP policy rule by ID
func (c *Client) IPPolicyRulesUpdate(ctx context.Context, arg *IPPolicyRuleUpdate) (*IPPolicyRule, *http.Response, error) {
	var res IPPolicyRule
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_policy_rules/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new IP restriction
func (c *Client) IPRestrictionsCreate(ctx context.Context, arg *IPRestrictionCreate) (*IPRestriction, *http.Response, error) {
	var res IPRestriction
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_restrictions")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an IP restriction
func (c *Client) IPRestrictionsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_restrictions/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an IP restriction
func (c *Client) IPRestrictionsGet(ctx context.Context, arg *Item) (*IPRestriction, *http.Response, error) {
	var res IPRestriction
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_restrictions/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all IP restrictions on this account
func (c *Client) IPRestrictionsList(ctx context.Context, arg *Page) (*IPRestrictionList, *http.Response, error) {
	var res IPRestrictionList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_restrictions")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an IP restriction by ID
func (c *Client) IPRestrictionsUpdate(ctx context.Context, arg *IPRestrictionUpdate) (*IPRestriction, *http.Response, error) {
	var res IPRestriction
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_restrictions/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new IP whitelist entry that will restrict traffic to all tunnel endpoints on the account.
func (c *Client) IPWhitelistCreate(ctx context.Context, arg *IPWhitelistEntryCreate) (*IPWhitelistEntry, *http.Response, error) {
	var res IPWhitelistEntry
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_whitelist")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an IP whitelist entry.
func (c *Client) IPWhitelistDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_whitelist/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an IP whitelist entry by ID.
func (c *Client) IPWhitelistGet(ctx context.Context, arg *Item) (*IPWhitelistEntry, *http.Response, error) {
	var res IPWhitelistEntry
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_whitelist/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all IP whitelist entries on this account
func (c *Client) IPWhitelistList(ctx context.Context, arg *Page) (*IPWhitelistEntryList, *http.Response, error) {
	var res IPWhitelistEntryList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_whitelist")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an IP whitelist entry by ID
func (c *Client) IPWhitelistUpdate(ctx context.Context, arg *IPWhitelistEntryUpdate) (*IPWhitelistEntry, *http.Response, error) {
	var res IPWhitelistEntry
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ip_whitelist/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new endpoint configuration
func (c *Client) EndpointConfigurationsCreate(ctx context.Context, arg *EndpointConfigurationCreate) (*EndpointConfiguration, *http.Response, error) {
	var res EndpointConfiguration
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an endpoint configuration. This operation will fail if the endpoint configuration is still referenced by any reserved domain or reserved address.
func (c *Client) EndpointConfigurationsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Returns detailed information about an endpoint configuration
func (c *Client) EndpointConfigurationsGet(ctx context.Context, arg *Item) (*EndpointConfiguration, *http.Response, error) {
	var res EndpointConfiguration
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Returns a list of all endpoint configurations on this account
func (c *Client) EndpointConfigurationsList(ctx context.Context, arg *Page) (*EndpointConfigurationList, *http.Response, error) {
	var res EndpointConfigurationList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Updates an endpoint configuration. If a module is not specified in the update, it will not be modified. However, each module configuration that is specified will completely replace the existing value. There is no way to delete an existing module via this API, instead use the delete module API.
func (c *Client) EndpointConfigurationsUpdate(ctx context.Context, arg *EndpointConfigurationUpdate) (*EndpointConfiguration, *http.Response, error) {
	var res EndpointConfiguration
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointLoggingModuleReplace(ctx context.Context, arg *EndpointLoggingReplace) (*EndpointLogging, *http.Response, error) {
	var res EndpointLogging
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/logging")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointLoggingModuleGet(ctx context.Context, arg *Item) (*EndpointLogging, *http.Response, error) {
	var res EndpointLogging
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/logging")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointLoggingModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/logging")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointBasicAuthModuleReplace(ctx context.Context, arg *EndpointBasicAuthReplace) (*EndpointBasicAuth, *http.Response, error) {
	var res EndpointBasicAuth
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/basic_auth")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointBasicAuthModuleGet(ctx context.Context, arg *Item) (*EndpointBasicAuth, *http.Response, error) {
	var res EndpointBasicAuth
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/basic_auth")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointBasicAuthModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/basic_auth")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointCircuitBreakerModuleReplace(ctx context.Context, arg *EndpointCircuitBreakerReplace) (*EndpointCircuitBreaker, *http.Response, error) {
	var res EndpointCircuitBreaker
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/circuit_breaker")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointCircuitBreakerModuleGet(ctx context.Context, arg *Item) (*EndpointCircuitBreaker, *http.Response, error) {
	var res EndpointCircuitBreaker
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/circuit_breaker")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointCircuitBreakerModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/circuit_breaker")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointCompressionModuleReplace(ctx context.Context, arg *EndpointCompressionReplace) (*EndpointCompression, *http.Response, error) {
	var res EndpointCompression
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/compression")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointCompressionModuleGet(ctx context.Context, arg *Item) (*EndpointCompression, *http.Response, error) {
	var res EndpointCompression
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/compression")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointCompressionModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/compression")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointTLSTerminationModuleReplace(ctx context.Context, arg *EndpointTLSTerminationReplace) (*EndpointTLSTermination, *http.Response, error) {
	var res EndpointTLSTermination
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/tls_termination")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointTLSTerminationModuleGet(ctx context.Context, arg *Item) (*EndpointTLSTermination, *http.Response, error) {
	var res EndpointTLSTermination
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/tls_termination")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointTLSTerminationModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/tls_termination")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointIPPolicyModuleReplace(ctx context.Context, arg *EndpointIPPolicyReplace) (*EndpointIPPolicy, *http.Response, error) {
	var res EndpointIPPolicy
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/ip_policy")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointIPPolicyModuleGet(ctx context.Context, arg *Item) (*EndpointIPPolicy, *http.Response, error) {
	var res EndpointIPPolicy
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/ip_policy")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointIPPolicyModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/ip_policy")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointMutualTLSModuleReplace(ctx context.Context, arg *EndpointMutualTLSReplace) (*EndpointMutualTLS, *http.Response, error) {
	var res EndpointMutualTLS
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/mutual_tls")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointMutualTLSModuleGet(ctx context.Context, arg *Item) (*EndpointMutualTLS, *http.Response, error) {
	var res EndpointMutualTLS
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/mutual_tls")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointMutualTLSModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/mutual_tls")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointRequestHeadersModuleReplace(ctx context.Context, arg *EndpointRequestHeadersReplace) (*EndpointRequestHeaders, *http.Response, error) {
	var res EndpointRequestHeaders
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/request_headers")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointRequestHeadersModuleGet(ctx context.Context, arg *Item) (*EndpointRequestHeaders, *http.Response, error) {
	var res EndpointRequestHeaders
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/request_headers")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointRequestHeadersModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/request_headers")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointResponseHeadersModuleReplace(ctx context.Context, arg *EndpointResponseHeadersReplace) (*EndpointResponseHeaders, *http.Response, error) {
	var res EndpointResponseHeaders
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/response_headers")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointResponseHeadersModuleGet(ctx context.Context, arg *Item) (*EndpointResponseHeaders, *http.Response, error) {
	var res EndpointResponseHeaders
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/response_headers")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointResponseHeadersModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/response_headers")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointOAuthModuleReplace(ctx context.Context, arg *EndpointOAuthReplace) (*EndpointOAuth, *http.Response, error) {
	var res EndpointOAuth
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/oauth")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointOAuthModuleGet(ctx context.Context, arg *Item) (*EndpointOAuth, *http.Response, error) {
	var res EndpointOAuth
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/oauth")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointOAuthModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/oauth")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointWebhookValidationModuleReplace(ctx context.Context, arg *EndpointWebhookValidationReplace) (*EndpointWebhookValidation, *http.Response, error) {
	var res EndpointWebhookValidation
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/webhook_validation")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointWebhookValidationModuleGet(ctx context.Context, arg *Item) (*EndpointWebhookValidation, *http.Response, error) {
	var res EndpointWebhookValidation
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/webhook_validation")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointWebhookValidationModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/webhook_validation")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointSAMLModuleReplace(ctx context.Context, arg *EndpointSAMLReplace) (*EndpointSAML, *http.Response, error) {
	var res EndpointSAML
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/saml")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointSAMLModuleGet(ctx context.Context, arg *Item) (*EndpointSAML, *http.Response, error) {
	var res EndpointSAML
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/saml")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointSAMLModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/saml")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointOIDCModuleReplace(ctx context.Context, arg *EndpointOIDCReplace) (*EndpointOIDC, *http.Response, error) {
	var res EndpointOIDC
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/oidc")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointOIDCModuleGet(ctx context.Context, arg *Item) (*EndpointOIDC, *http.Response, error) {
	var res EndpointOIDC
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/oidc")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointOIDCModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/oidc")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointBackendModuleReplace(ctx context.Context, arg *EndpointBackendReplace) (*EndpointBackend, *http.Response, error) {
	var res EndpointBackend
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/backend")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Put(ctx, path.String(), arg.Module, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointBackendModuleGet(ctx context.Context, arg *Item) (*EndpointBackend, *http.Response, error) {
	var res EndpointBackend
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/backend")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) EndpointBackendModuleDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/endpoint_configurations/{{ .ID }}/backend")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new reserved address.
func (c *Client) ReservedAddrsCreate(ctx context.Context, arg *ReservedAddrCreate) (*ReservedAddr, *http.Response, error) {
	var res ReservedAddr
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_addrs")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete a reserved address.
func (c *Client) ReservedAddrsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_addrs/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get the details of a reserved address.
func (c *Client) ReservedAddrsGet(ctx context.Context, arg *Item) (*ReservedAddr, *http.Response, error) {
	var res ReservedAddr
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_addrs/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all reserved addresses on this account.
func (c *Client) ReservedAddrsList(ctx context.Context, arg *Page) (*ReservedAddrList, *http.Response, error) {
	var res ReservedAddrList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_addrs")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update the attributes of a reserved address.
func (c *Client) ReservedAddrsUpdate(ctx context.Context, arg *ReservedAddrUpdate) (*ReservedAddr, *http.Response, error) {
	var res ReservedAddr
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_addrs/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Detach the endpoint configuration attached to a reserved address.
func (c *Client) ReservedAddrsDeleteEndpointConfig(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_addrs/{{ .ID }}/endpoint_configuration")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new reserved domain.
func (c *Client) ReservedDomainsCreate(ctx context.Context, arg *ReservedDomainCreate) (*ReservedDomain, *http.Response, error) {
	var res ReservedDomain
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete a reserved domain.
func (c *Client) ReservedDomainsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get the details of a reserved domain.
func (c *Client) ReservedDomainsGet(ctx context.Context, arg *Item) (*ReservedDomain, *http.Response, error) {
	var res ReservedDomain
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all reserved domains on this account.
func (c *Client) ReservedDomainsList(ctx context.Context, arg *Page) (*ReservedDomainList, *http.Response, error) {
	var res ReservedDomainList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update the attributes of a reserved domain.
func (c *Client) ReservedDomainsUpdate(ctx context.Context, arg *ReservedDomainUpdate) (*ReservedDomain, *http.Response, error) {
	var res ReservedDomain
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Detach the certificate management policy attached to a reserved domain.
func (c *Client) ReservedDomainsDeleteCertificateManagementPolicy(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}/certificate_management_policy")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Detach the certificate attached to a reserved domain.
func (c *Client) ReservedDomainsDeleteCertificate(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}/certificate")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Detach the http endpoint configuration attached to a reserved domain.
func (c *Client) ReservedDomainsDeleteHTTPEndpointConfig(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}/http_endpoint_configuration")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Detach the https endpoint configuration attached to a reserved domain.
func (c *Client) ReservedDomainsDeleteHTTPSEndpointConfig(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/reserved_domains/{{ .ID }}/https_endpoint_configuration")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

func (c *Client) RootGet(ctx context.Context, arg *Empty) (*RootResponse, *http.Response, error) {
	var res RootResponse
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new SSH Certificate Authority
func (c *Client) SSHCertificateAuthoritiesCreate(ctx context.Context, arg *SSHCertificateAuthorityCreate) (*SSHCertificateAuthority, *http.Response, error) {
	var res SSHCertificateAuthority
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_certificate_authorities")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an SSH Certificate Authority
func (c *Client) SSHCertificateAuthoritiesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_certificate_authorities/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an SSH Certficate Authority
func (c *Client) SSHCertificateAuthoritiesGet(ctx context.Context, arg *Item) (*SSHCertificateAuthority, *http.Response, error) {
	var res SSHCertificateAuthority
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_certificate_authorities/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all SSH Certificate Authorities on this account
func (c *Client) SSHCertificateAuthoritiesList(ctx context.Context, arg *Page) (*SSHCertificateAuthorityList, *http.Response, error) {
	var res SSHCertificateAuthorityList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_certificate_authorities")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update an SSH Certificate Authority
func (c *Client) SSHCertificateAuthoritiesUpdate(ctx context.Context, arg *SSHCertificateAuthorityUpdate) (*SSHCertificateAuthority, *http.Response, error) {
	var res SSHCertificateAuthority
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_certificate_authorities/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new ssh_credential from an uploaded public SSH key. This ssh credential can be used to start new tunnels via ngrok's SSH gateway.
func (c *Client) SSHCredentialsCreate(ctx context.Context, arg *SSHCredentialCreate) (*SSHCredential, *http.Response, error) {
	var res SSHCredential
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_credentials")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an ssh_credential by ID
func (c *Client) SSHCredentialsDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_credentials/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an ssh_credential
func (c *Client) SSHCredentialsGet(ctx context.Context, arg *Item) (*SSHCredential, *http.Response, error) {
	var res SSHCredential
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_credentials/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all ssh credentials on this account
func (c *Client) SSHCredentialsList(ctx context.Context, arg *Page) (*SSHCredentialList, *http.Response, error) {
	var res SSHCredentialList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_credentials")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of an ssh_credential by ID
func (c *Client) SSHCredentialsUpdate(ctx context.Context, arg *SSHCredentialUpdate) (*SSHCredential, *http.Response, error) {
	var res SSHCredential
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_credentials/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new SSH Host Certificate
func (c *Client) SSHHostCertificatesCreate(ctx context.Context, arg *SSHHostCertificateCreate) (*SSHHostCertificate, *http.Response, error) {
	var res SSHHostCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_host_certificates")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an SSH Host Certificate
func (c *Client) SSHHostCertificatesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_host_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an SSH Host Certficate
func (c *Client) SSHHostCertificatesGet(ctx context.Context, arg *Item) (*SSHHostCertificate, *http.Response, error) {
	var res SSHHostCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_host_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all SSH Host Certificates issued on this account
func (c *Client) SSHHostCertificatesList(ctx context.Context, arg *Page) (*SSHHostCertificateList, *http.Response, error) {
	var res SSHHostCertificateList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_host_certificates")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update an SSH Host Certificate
func (c *Client) SSHHostCertificatesUpdate(ctx context.Context, arg *SSHHostCertificateUpdate) (*SSHHostCertificate, *http.Response, error) {
	var res SSHHostCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_host_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Create a new SSH User Certificate
func (c *Client) SSHUserCertificatesCreate(ctx context.Context, arg *SSHUserCertificateCreate) (*SSHUserCertificate, *http.Response, error) {
	var res SSHUserCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_user_certificates")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete an SSH User Certificate
func (c *Client) SSHUserCertificatesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_user_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about an SSH User Certficate
func (c *Client) SSHUserCertificatesGet(ctx context.Context, arg *Item) (*SSHUserCertificate, *http.Response, error) {
	var res SSHUserCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_user_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all SSH User Certificates issued on this account
func (c *Client) SSHUserCertificatesList(ctx context.Context, arg *Page) (*SSHUserCertificateList, *http.Response, error) {
	var res SSHUserCertificateList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_user_certificates")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update an SSH User Certificate
func (c *Client) SSHUserCertificatesUpdate(ctx context.Context, arg *SSHUserCertificateUpdate) (*SSHUserCertificate, *http.Response, error) {
	var res SSHUserCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/ssh_user_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Upload a new TLS certificate
func (c *Client) TLSCertificatesCreate(ctx context.Context, arg *TLSCertificateCreate) (*TLSCertificate, *http.Response, error) {
	var res TLSCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tls_certificates")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Delete a TLS certificate
func (c *Client) TLSCertificatesDelete(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tls_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Delete(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get detailed information about a TLS certificate
func (c *Client) TLSCertificatesGet(ctx context.Context, arg *Item) (*TLSCertificate, *http.Response, error) {
	var res TLSCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tls_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all TLS certificates on this account
func (c *Client) TLSCertificatesList(ctx context.Context, arg *Page) (*TLSCertificateList, *http.Response, error) {
	var res TLSCertificateList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tls_certificates")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Update attributes of a TLS Certificate by ID
func (c *Client) TLSCertificatesUpdate(ctx context.Context, arg *TLSCertificateUpdate) (*TLSCertificate, *http.Response, error) {
	var res TLSCertificate
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tls_certificates/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Patch(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all online tunnel sessions running on this account.
func (c *Client) TunnelSessionsList(ctx context.Context, arg *Page) (*TunnelSessionList, *http.Response, error) {
	var res TunnelSessionList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tunnel_sessions")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Get the detailed status of a tunnel session by ID
func (c *Client) TunnelSessionsGet(ctx context.Context, arg *Item) (*TunnelSession, *http.Response, error) {
	var res TunnelSession
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tunnel_sessions/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Issues a command instructing the ngrok agent to restart. The agent restarts itself by calling exec() on platforms that support it. This operation is notably not supported on Windows. When an agent restarts, it reconnects with a new tunnel session ID.
func (c *Client) TunnelSessionsRestart(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tunnel_sessions/{{ .ID }}/restart")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Issues a command instructing the ngrok agent that started this tunnel session to exit.
func (c *Client) TunnelSessionsStop(ctx context.Context, arg *Item) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tunnel_sessions/{{ .ID }}/stop")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// Issues a command instructing the ngrok agent to update itself to the latest version. After this call completes successfully, the ngrok agent will be in the update process. A caller should wait some amount of time to allow the update to complete (at least 10 seconds) before making a call to the Restart endpoint to request that the agent restart itself to start using the new code. This call will never update an ngrok agent to a new major version which could cause breaking compatibility issues. If you wish to update to a new major version, that must be done manually. Still, please be aware that updating your ngrok agent could break your integration. This call will fail in any of the following circumstances: there is no update available the ngrok agent's configuration disabled update checks the agent is currently in process of updating the agent has already successfully updated but has not yet been restarted
func (c *Client) TunnelSessionsUpdate(ctx context.Context, arg *TunnelSessionsUpdate) (*Empty, *http.Response, error) {
	var res Empty
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tunnel_sessions/{{ .ID }}/update")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty
	arg.ID = ""

	resp, err := c.Post(ctx, path.String(), arg, &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}

// List all online tunnels currently running on the account.
func (c *Client) TunnelsList(ctx context.Context, arg *Page) (*TunnelList, *http.Response, error) {
	var res TunnelList
	var path bytes.Buffer
	if err := template.Must(template.New("").Parse("/tunnels")).Execute(&path, arg); err != nil {
		panic(err)
	}

	// setting URI parameters to zero isn't really necessary but it makes the generated examples in the documentation pretty

	resp, err := c.Get(ctx, path.String(), &res)
	if errors.Is(err, io.EOF) && resp.StatusCode == 204 {
		err = nil
	}
	return &res, resp, err
}
